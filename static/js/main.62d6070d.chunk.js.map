{"version":3,"sources":["hooks/usePeople.ts","context/theme.tsx","hooks/useTheme.ts","components/PersonItem/PersonItem.tsx","components/DetailsModal/PersonHeader.tsx","components/DetailsModal/DisplayPerson.tsx","components/DetailsModal/DetailsModal.tsx","hooks/useKeyboardEvent.ts","components/ToggleButton/ToggleButton.tsx","components/SearchInput/SearchInput.tsx","components/ListHeader/ListHeader.tsx","components/Loader/Loader.tsx","components/PeopleList/NetworkError.tsx","components/PeopleList/PeopleList.tsx","hooks/useToggledState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ENDPOINT","comparePeople","p1","p2","p1FullName","name","first","last","p2FullName","localeCompare","ThemeContextValue","React","createContext","theme","setTheme","toggleTheme","themed","classes","useTheme","useContext","PersonItem","props","person","onItemClick","picture","firstName","lastName","className","href","onClick","event","preventDefault","src","medium","alt","BackButton","xmlns","width","height","viewBox","d","PersonHeader","closeModal","large","login","username","LocationIcon","EmailIcon","PhoneIcon","PersonInfo","location","email","cell","city","state","country","DisplayPerson","Modal","posed","div","enter","x","transition","duration","exit","Shade","opacity","DetailsModel","eventCallbacks","isOpen","toggleModal","selectedPerson","keyHandler","useCallback","e","Escape","useEffect","handler","key","document","addEventListener","removeEventListener","animateOnMount","LightIcon","DarkIcon","ToggleButton","checked","onChange","type","ClearButton","SearchInput","useState","query","setQuery","placeholder","value","target","length","ListHeader","Loader","NetworkError","message","PeopleContainer","y","PeopleList","people","setPeople","fetching","setFetching","error","setError","_fetchData","a","axios","get","data","results","sort","fetchData","usePeople","setSelectedPerson","initialValue","setValue","useToggledState","toggleModalWithData","map","uuid","App","Boolean","window","hostname","match","ReactDOM","render","children","themeHandler","Provider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62d6070d.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport { Person, APIResult } from '../models/people';\nimport axios from 'axios';\n\nconst ENDPOINT: string =\n    'https://randomuser.me/api/?seed=peoplefinder&results=100';\n\ninterface PeopleFetch {\n    people: Person[],\n    fetching: boolean,\n    error: string | null,\n}\n\nconst comparePeople = (p1: Person, p2: Person): number => {\n    const p1FullName = `${p1.name.first} ${p1.name.last}`;\n    const p2FullName = `${p2.name.first} ${p2.name.last}`;\n\n    return p1FullName.localeCompare(p2FullName);\n}\n\nexport const usePeople = (): PeopleFetch => {\n    const [people, setPeople] = useState<Person[]>([]);\n    const [fetching, setFetching] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    const _fetchData = async (): Promise<void> => {\n        try {\n            const { data } = await axios.get<APIResult>(ENDPOINT);\n\n            setFetching(false);\n            setPeople(data.results.sort(comparePeople));\n        } catch (err) {\n            setFetching(false);\n            setError(`Network Error`);\n        }\n    };\n\n    const fetchData = useCallback(_fetchData, [ENDPOINT]);\n\n    useEffect(() => {\n        fetchData();\n    }, [fetchData]);\n\n    return {people, fetching, error};\n};\n","import React, { useState } from 'react';\n\nexport type Theme = 'dark' | 'light';\n\nexport interface ThemeContext {\n    theme: Theme;\n    setTheme: (theme: Theme) => void;\n    toggleTheme: () => void;\n    themed: (classes: string) => string;\n}\n\n// Default context, we won't reach this point cause this context will be provided at App level\nconst voidContext: ThemeContext = {\n    theme: 'light',\n    setTheme: theme => {},\n    toggleTheme: () => {},\n    themed: classes => `${classes} light`,\n};\n\nexport const ThemeContextValue = React.createContext<ThemeContext>(voidContext);\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n    const [theme, setTheme] = useState<Theme>('light');\n\n    const toggleTheme = (): void => {\n        setTheme(theme === 'dark' ? 'light' : 'dark');\n    };\n\n    const themed = (classes: string) => {\n        return `${classes} ${theme}`;\n    };\n\n    const themeHandler: ThemeContext = {\n        theme,\n        setTheme,\n        toggleTheme,\n        themed,\n    };\n\n    return (\n        <ThemeContextValue.Provider value={themeHandler}>\n            {children}\n        </ThemeContextValue.Provider>\n    );\n};\n","import { useContext } from 'react';\nimport { ThemeContextValue, ThemeContext } from '../context/theme';\n\nexport const useTheme = (): ThemeContext => {\n    return useContext<ThemeContext>(ThemeContextValue);\n}","import React from 'react';\nimport { Person } from '../../models/people';\nimport { useTheme } from '../../hooks/useTheme';\n\nimport './PersonItem.scss';\n\ninterface Props {\n    person: Person;\n    onItemClick: (person: Person) => void;\n}\n\nexport const PersonItem: React.FC<Props> = (props: Props) => {\n    const { person, onItemClick } = props;\n    const { picture, name } = person;\n    const { first: firstName, last: lastName } = name;\n\n    const { themed } = useTheme();\n\n    const onClick: React.MouseEventHandler = (event: React.MouseEvent) => {\n        onItemClick(person);\n        event.preventDefault();\n    };\n\n    return (\n        <div className=\"person-item-container\">\n            <a\n                href=\"/\"\n                onClick={onClick}\n                className={themed('person-item-link')}\n            >\n                <img\n                    src={picture.medium}\n                    alt={`${firstName} ${lastName} thumbnail`}\n                />\n                <span className={themed('person-name')}>\n                    {firstName} {lastName}\n                </span>\n            </a>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Person } from '../../models/people';\n\nimport './PersonHeader.scss';\n\ninterface ButtonProps {\n    onClick: () => void;\n}\n\nconst BackButton: React.FC<ButtonProps> = ({ onClick }) => {\n    return (\n        <button onClick={onClick} className=\"back-button\">\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"32px\"\n                height=\"32px\"\n                viewBox=\"0 0 24 24\"\n            >\n                <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\" />\n            </svg>\n        </button>\n    );\n};\n\ninterface HeaderProps {\n    person: Person;\n    closeModal: () => void;\n}\n\nexport const PersonHeader: React.FC<HeaderProps> = props => {\n    const { person, closeModal } = props;\n\n    return (\n        <div className=\"person-header-container\">\n            <BackButton onClick={closeModal} />\n            <div className=\"header-image-background-container\">\n                <img\n                    className=\"header-image-background\"\n                    alt=\"Header background\"\n                    src={person.picture.large}\n                />\n            </div>\n\n            <div className=\"basic-description-container\">\n                <div className=\"header-image-container\">\n                    <img\n                        className=\"header-image\"\n                        alt=\"Header\"\n                        src={person.picture.large}\n                    />\n                </div>\n                <h1>\n                    {person.name.first} {person.name.last}\n                </h1>\n                <p>@{person.login.username}</p>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Person } from '../../models/people';\nimport { useTheme } from '../../hooks/useTheme';\nimport { PersonHeader } from './PersonHeader';\n\nimport './DisplayPerson.scss';\n\nconst LocationIcon: React.FC = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z\" />\n    </svg>\n);\n\nconst EmailIcon: React.FC = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\" />\n    </svg>\n);\n\nconst PhoneIcon: React.FC = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M20.01 15.38c-1.23 0-2.42-.2-3.53-.56-.35-.12-.74-.03-1.01.24l-1.57 1.97c-2.83-1.35-5.48-3.9-6.89-6.83l1.95-1.66c.27-.28.35-.67.24-1.02-.37-1.11-.56-2.3-.56-3.53 0-.54-.45-.99-.99-.99H4.19C3.65 3 3 3.24 3 3.99 3 13.28 10.73 21 20.01 21c.71 0 .99-.63.99-1.18v-3.45c0-.54-.45-.99-.99-.99z\" />\n    </svg>\n);\n\ninterface InfoProps {\n    person: Person;\n}\nconst PersonInfo: React.FC<InfoProps> = props => {\n    const { themed } = useTheme();\n\n    const { person } = props;\n    const { location, email, cell } = person;\n    const { city, state, country } = location;\n\n    return (\n        <div className={themed('person-info-container')}>\n            <div className=\"info-piece\">\n                <div className=\"icon-and-heading\">\n                    <LocationIcon />\n                    <h3>Location</h3>\n                </div>\n                <p>\n                    {city}, {state}, {country}\n                </p>\n            </div>\n\n            <div className=\"info-piece\">\n                <a href={`mailto: ${email}`}>\n                    <div className=\"icon-and-heading\">\n                        <EmailIcon />\n                        <h3>Email Address</h3>\n                    </div>\n                    <p>{email}</p>\n                </a>\n            </div>\n\n            <div className=\"info-piece\">\n                <a href={`tel:${cell}`}>\n                    <div className=\"icon-and-heading\">\n                        <PhoneIcon />\n                        <h3>Phone Number</h3>\n                    </div>\n                    <p>{cell}</p>\n                </a>\n            </div>\n        </div>\n    );\n};\n\ninterface Props {\n    person: Person;\n    closeModal: () => void;\n}\n\nexport const DisplayPerson: React.FC<Props> = props => {\n    const { person, closeModal } = props;\n\n    return (\n        <div>\n            <PersonHeader person={person} closeModal={closeModal} />\n            <PersonInfo person={person} />\n        </div>\n    );\n};\n","import React, { useCallback } from 'react';\nimport { Person } from '../../models/people';\nimport { useTheme } from '../../hooks/useTheme';\nimport { useKeyboardEvent } from '../../hooks/useKeyboardEvent';\nimport posed, { PoseGroup } from 'react-pose';\n\nimport './DetailsModal.scss';\nimport { DisplayPerson } from './DisplayPerson';\n\nconst Modal = posed.div({\n    enter: {\n        x: '0vw',\n        transition: { duration: 150 },\n    },\n    exit: {\n        x: '100vw',\n        transition: { duration: 150 },\n    },\n});\n\nconst Shade = posed.div({\n    enter: { opacity: 1 },\n    exit: { opacity: 0 },\n});\n\ninterface Props {\n    selectedPerson: Person | null;\n    isOpen: boolean;\n    toggleModal: (person: Person | null) => void;\n}\n\nexport const DetailsModel: React.FC<Props> = props => {\n    const { isOpen, toggleModal, selectedPerson } = props;\n\n    const { themed } = useTheme();\n\n    const closeModal = () => {\n        toggleModal(null);\n    };\n\n    // Close modal when we press 'Escape'\n    const keyHandler = useCallback(\n        (e: KeyboardEvent) => {\n            if (isOpen) {\n                toggleModal(null);\n            }\n        },\n        [isOpen, toggleModal]\n    );\n    useKeyboardEvent({ Escape: keyHandler });\n\n    return (\n        <PoseGroup animateOnMount={true}>\n            {isOpen && [\n                <Shade key=\"backdrop\" className={themed('modal-backdrop')} />,\n\n                <Modal key=\"modal\" className={themed('details-modal')}>\n                    {selectedPerson && (\n                        <DisplayPerson closeModal={closeModal} person={selectedPerson} />\n                    )}\n                </Modal>,\n            ]}\n        </PoseGroup>\n    );\n};\n","import { useEffect } from 'react';\n\nexport type KeyboardEventCallback = {\n    [key: string]: (e: KeyboardEvent) => void;\n};\n\nexport const useKeyboardEvent = (eventCallbacks: KeyboardEventCallback) => {\n    useEffect(() => {\n        const handler = (e: KeyboardEvent): void => {\n            if (eventCallbacks[e.key]) {\n                eventCallbacks[e.key](e);\n            }\n        };\n\n        document.addEventListener('keydown', handler);\n\n        return () => {\n            document.removeEventListener('keydown', handler);\n        };\n    }, [eventCallbacks]);\n};\n","import React from 'react';\n\nimport './ToggleButton.scss';\n\ninterface Props {\n    checked: boolean;\n    onChange: () => void;\n}\n\nconst LightIcon: React.FC = () => {\n    return (\n        <svg\n            className=\"light-theme-icon\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"15px\"\n            height=\"15px\"\n            viewBox=\"0 0 24 24\"\n        >\n            <path d=\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\" />\n        </svg>\n    );\n};\n\nconst DarkIcon: React.FC = () => {\n    return (\n        <svg\n            className=\"dark-theme-icon\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"15px\"\n            height=\"15px\"\n            viewBox=\"0 0 24 24\"\n        >\n            <path d=\"M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z\" />\n        </svg>\n    );\n};\n\nexport const ToggleButton: React.FC<Props> = props => {\n    const { checked, onChange } = props;\n\n    return (\n        <label className=\"switch\">\n            <input checked={checked} onChange={onChange} type=\"checkbox\" />\n            <span className=\"slider round\">\n                <LightIcon />\n                <DarkIcon />\n                <div className=\"icon-background\" />\n            </span>\n        </label>\n    );\n};\n","import React, { useState } from 'react';\nimport { useTheme } from '../../hooks/useTheme';\n\nimport './SearchInput.scss';\n\ninterface ClearProps {\n    onClick: () => void;\n}\nconst ClearButton: React.FC<ClearProps> = (props) => {\n    const { onClick } = props;\n    const { themed } = useTheme();\n\n    return (\n        <button className='clear-button' onClick={onClick}>\n            <svg\n                className={themed('clear-icon')}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"18px\"\n                height=\"18px\"\n                viewBox=\"0 0 24 24\"\n            >\n                <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n            </svg>\n        </button>\n    );\n};\n\nexport const SearchInput: React.FC = () => {\n    const { themed } = useTheme();\n\n    const [query, setQuery] = useState<string>('');\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const { value } = e.target;\n        setQuery(value);\n    };\n\n    const clearQuery = (): void => {\n        setQuery('');\n    }\n\n    return (\n        <div className={themed('search-input-container')}>\n            <input\n                placeholder=\"Search by name or surname\"\n                value={query}\n                onChange={onChange}\n                className={themed('search-input')}\n            />\n            {query.length > 0 && <ClearButton onClick={clearQuery} />}\n        </div>\n    );\n};\n","import React from 'react';\nimport { useTheme } from '../../hooks/useTheme';\nimport { ToggleButton } from '../ToggleButton/ToggleButton';\nimport { SearchInput } from '../SearchInput/SearchInput';\n\nimport './ListHeader.scss';\n\ninterface Props {}\n\nexport const ListHeader: React.FC<Props> = () => {\n    const { themed, toggleTheme, theme } = useTheme();\n\n    return (\n        <header className={themed('list-header-container')}>\n            <div className=\"title-and-theme\">\n                <h1 className={themed('list-title')}>People</h1>\n                <ToggleButton\n                    checked={theme === 'dark'}\n                    onChange={toggleTheme}\n                />\n            </div>\n            <p className={themed('list-description')}>\n                You can search for someone, no need for a perfect match!\n            </p>\n            <SearchInput />\n        </header>\n    );\n};\n","import React from 'react';\nimport { useTheme } from '../../hooks/useTheme';\n\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => {\n    const { themed } = useTheme();\n\n    return (\n        <div className={themed(\"lds-ring\")}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useTheme } from '../../hooks/useTheme';\n\ninterface ErrorProps {\n    message: string;\n}\n\nexport const NetworkError: React.FC<ErrorProps> = props => {\n    const { message } = props;\n    const { themed } = useTheme();\n\n    return (\n        <div className={themed('error-message-container')}>\n            <svg\n                className={themed('error-message-icon')}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"128px\"\n                height=\"128px\"\n                viewBox=\"0 0 24 24\"\n            >\n                <path d=\"M22.99 9C19.15 5.16 13.8 3.76 8.84 4.78l2.52 2.52c3.47-.17 6.99 1.05 9.63 3.7l2-2zm-4 4c-1.29-1.29-2.84-2.13-4.49-2.56l3.53 3.53.96-.97zM2 3.05L5.07 6.1C3.6 6.82 2.22 7.78 1 9l1.99 2c1.24-1.24 2.67-2.16 4.2-2.77l2.24 2.24C7.81 10.89 6.27 11.73 5 13v.01L6.99 15c1.36-1.36 3.14-2.04 4.92-2.06L18.98 20l1.27-1.26L3.29 1.79 2 3.05zM9 17l3 3 3-3c-1.65-1.66-4.34-1.66-6 0z\" />\n            </svg>\n\n            <h2 className={themed('error-title')}>Oh no!</h2>\n            <p className={themed('error-message')}>\n                Could not get people information.\n            </p>\n            <p className={themed('error-message')}>{message}</p>\n        </div>\n    );\n};","import React, { useState } from 'react';\nimport posed, { PoseGroup } from 'react-pose';\nimport { usePeople } from '../../hooks/usePeople';\nimport { Person } from '../../models/people';\nimport { PersonItem } from '../PersonItem/PersonItem';\nimport { useTheme } from '../../hooks/useTheme';\nimport { DetailsModel } from '../DetailsModal/DetailsModal';\nimport { useToggledState } from '../../hooks/useToggledState';\nimport { ListHeader } from '../ListHeader/ListHeader';\nimport { Loader } from '../Loader/Loader';\nimport { NetworkError } from './NetworkError';\n\nimport './PeopleList.scss';\n\nconst PeopleContainer = posed.div({\n    enter: {\n        y: '0vh',\n        opacity: 1,\n        transition: { duration: 250 },\n    },\n    exit: {\n        y: '100vh',\n        opacity: 0,\n        transition: { duration: 250 },\n    },\n});\n\nexport const PeopleList: React.FC<{}> = props => {\n    const { people, fetching, error } = usePeople();\n    const { themed } = useTheme();\n\n    const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);\n    const [isOpen, toggleModal] = useToggledState(false);\n    const toggleModalWithData = (person: Person | null) => {\n        setSelectedPerson(person);\n        toggleModal();\n    };\n\n    return (\n        <>\n            <div className={themed('people-list-container')}>\n                <ListHeader />\n\n                {fetching && (\n                    <div className={themed('loader-container')}>\n                        <Loader />\n                    </div>\n                )}\n\n                {error && <NetworkError message={error} />}\n\n                <PoseGroup>\n                    {people.length > 0 && (\n                        <PeopleContainer className='animated-people-container' key=\"container\">\n                            {people.map((person: Person) => {\n                                return (\n                                    <PersonItem\n                                        onItemClick={toggleModalWithData}\n                                        person={{ ...person }}\n                                        key={person.login.uuid}\n                                    />\n                                );\n                            })}\n                        </PeopleContainer>\n                    )}\n                </PoseGroup>\n            </div>\n\n            <DetailsModel\n                isOpen={isOpen}\n                toggleModal={toggleModalWithData}\n                selectedPerson={selectedPerson}\n            />\n        </>\n    );\n};\n","import { useState } from 'react';\n\ntype Toggler = () => void;\n\nexport const useToggledState = (initialValue: boolean): [boolean, Toggler] => {\n    const [value, setValue] = useState<boolean>(initialValue);\n\n    const toggleValue = (): void => {\n        setValue(!value);\n    }\n\n    return [value, toggleValue];\n}","import React from 'react';\nimport { PeopleList } from './components/PeopleList/PeopleList';\nimport { useTheme } from './hooks/useTheme';\nimport './App.scss';\n\nconst App: React.FC = () => {\n    const { themed } = useTheme();\n\n    return (\n        <div className={themed('app-container')}>\n            <PeopleList />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from './context/theme';\n\nReactDOM.render(\n    <ThemeProvider>\n        <App />\n    </ThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}